import "./chunk-TWLJ45QX.js";

// node_modules/.pnpm/@varlet+touch-emulator@2.2.1/node_modules/@varlet/touch-emulator/index.js
var inBrowser = typeof window !== "undefined";
var supportTouch = inBrowser && "ontouchstart" in window;
var initiated = false;
var eventTarget;
var isMousedown = (eventType) => eventType === "mousedown";
var isMousemove = (eventType) => eventType === "mousemove";
var isMouseup = (eventType) => eventType === "mouseup";
var isUpdateTarget = (eventType) => isMousedown(eventType) || !eventTarget || eventTarget && !eventTarget.dispatchEvent;
function Touch(target, identifier, mouseEvent) {
  const { clientX, clientY, screenX, screenY, pageX, pageY } = mouseEvent;
  this.identifier = identifier;
  this.target = target;
  this.clientX = clientX;
  this.clientY = clientY;
  this.screenX = screenX;
  this.screenY = screenY;
  this.pageX = pageX;
  this.pageY = pageY;
}
function updateTouchList(mouseEvent) {
  const touchList = createTouchList();
  touchList.push(new Touch(eventTarget, 1, mouseEvent));
  return touchList;
}
function createTouchList() {
  const touchList = [];
  touchList.item = function(index) {
    return this[index] || null;
  };
  return touchList;
}
function getActiveTouches(mouseEvent) {
  const { type } = mouseEvent;
  if (isMouseup(type))
    return createTouchList();
  return updateTouchList(mouseEvent);
}
function triggerTouch(touchType, mouseEvent) {
  const { altKey, ctrlKey, metaKey, shiftKey } = mouseEvent;
  const touchEvent = new Event(touchType, { bubbles: true, cancelable: true });
  touchEvent.altKey = altKey;
  touchEvent.ctrlKey = ctrlKey;
  touchEvent.metaKey = metaKey;
  touchEvent.shiftKey = shiftKey;
  touchEvent.touches = getActiveTouches(mouseEvent);
  touchEvent.targetTouches = getActiveTouches(mouseEvent);
  touchEvent.changedTouches = createTouchList();
  eventTarget.dispatchEvent(touchEvent);
}
function onMouse(mouseEvent, touchType) {
  const { type, target } = mouseEvent;
  initiated = isMousedown(type) ? true : isMouseup(type) ? false : initiated;
  if (isMousemove(type) && !initiated)
    return;
  if (isUpdateTarget(type))
    eventTarget = target;
  triggerTouch(touchType, mouseEvent);
  if (isMouseup(type))
    eventTarget = null;
}
function createTouchEmulator() {
  window.addEventListener("mousedown", (event) => onMouse(event, "touchstart"), true);
  window.addEventListener("mousemove", (event) => onMouse(event, "touchmove"), true);
  window.addEventListener("mouseup", (event) => onMouse(event, "touchend"), true);
}
if (inBrowser && !supportTouch) {
  createTouchEmulator();
}
var touch_emulator_default = {};
export {
  touch_emulator_default as default
};
//# sourceMappingURL=@varlet_touch-emulator.js.map
